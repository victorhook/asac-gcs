[
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "SettingsGeneral",
        "kind": 6,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "class SettingsGeneral:\n    craft_name: str\n@dataclass\nclass SettingsPID:\n    roll_p: float = 0.0\n    roll_i: float = 0.0\n    roll_d: float = 0.0\n    pitch_p: float = 0.0\n    pitch_i: float = 0.0\n    pitch_d: float = 0.0",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "SettingsPID",
        "kind": 6,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "class SettingsPID:\n    roll_p: float = 0.0\n    roll_i: float = 0.0\n    roll_d: float = 0.0\n    pitch_p: float = 0.0\n    pitch_i: float = 0.0\n    pitch_d: float = 0.0\n    yaw_p: float = 0.0\n    yaw_i: float = 0.0\n    yaw_d: float = 0.0",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "ParamFloat",
        "kind": 6,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "class ParamFloat:\n    def __init__(self, parent, row: int, name: str, value: float) -> None:\n        pack = {'padx': 5, 'pady': 5, 'sticky': tk.W}\n        tk.Label(parent, text=name, **label_style).grid(row=row, column=0, **pack)\n        self._entry = tk.Entry(parent, **entry_style)\n        self._entry.grid(row=row, column=1, **pack)\n        self.set(value)\n    def get(self) -> float:\n        return float(self._entry.get())\n    def set(self, value: float) -> None:",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "Content",
        "kind": 6,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "class Content(tk.Frame):\n    def __init__(self, parent, title: str) -> None:\n        super().__init__(parent, **frame_style)\n        title = tk.Label(self, text=title, **label_style)\n        title.config(font=('Courier', 20))\n        title.pack()\n        self.content = tk.Frame(self, **frame_style)\n        self.content.pack()\n        self.name = title\nclass ContentGeneral(Content):",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "ContentGeneral",
        "kind": 6,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "class ContentGeneral(Content):\n    def __init__(self, parent, save_callback: callable) -> None:\n        super().__init__(parent, 'General')\n        pack = {'padx': 10, 'pady': 10}\n        tk.Label(self.content, text='Craft name', **label_style).grid(row=0, column=0, **pack)\n        tk.Label(self.content, text='Rotation X', **label_style).grid(row=1, column=0, **pack)\n        tk.Label(self.content, text='Rotation Y', **label_style).grid(row=2, column=0, **pack)\n        tk.Label(self.content, text='Rotation Z', **label_style).grid(row=3, column=0, **pack)\n        tk.Label(self.content, text='ESC Protocol', **label_style).grid(row=4, column=0, **pack)\n        self.input_craft_name = tk.Entry(self.content, **entry_style)",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "ContentPid",
        "kind": 6,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "class ContentPid(Content):\n    def __init__(self, parent, save_callback: callable) -> None:\n        super().__init__(parent, 'PID')\n        pack = {'padx': 10, 'pady': 10, 'ipadx': 5, 'ipady': 5}\n        self.frame_roll = tk.LabelFrame(self.content, **frame_style, text='ROLL')\n        self.frame_pitch = tk.LabelFrame(self.content, **frame_style, text='PITCH')\n        self.frame_yaw = tk.LabelFrame(self.content, **frame_style, text='YAW')\n        self.roll_p = ParamFloat(self.frame_roll, 0, 'P', 0)\n        self.roll_i = ParamFloat(self.frame_roll, 1, 'I', 0)\n        self.roll_d = ParamFloat(self.frame_roll, 2, 'D', 0)",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "ContentMotors",
        "kind": 6,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "class ContentMotors(Content):\n    def __init__(self, parent) -> None:\n        super().__init__(parent, 'Motors')\nclass Gui(tk.Tk):\n    WIDTH = 1000\n    HEIGHT = 800\n    def __init__(self) -> None:\n        super().__init__()\n        # Some general UI\n        self.BG = BASE_BACKGROUND",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "Gui",
        "kind": 6,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "class Gui(tk.Tk):\n    WIDTH = 1000\n    HEIGHT = 800\n    def __init__(self) -> None:\n        super().__init__()\n        # Some general UI\n        self.BG = BASE_BACKGROUND\n        self.geometry(f'{self.WIDTH}x{self.HEIGHT}')\n        self.config(bg=self.BG)\n        self.title('ASAC GCS')",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "get_image",
        "kind": 2,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "def get_image(name: str) -> tk.PhotoImage:\n    return tk.PhotoImage(file=RESOURCES.joinpath(name))\n# Settings struct\n@dataclass\nclass SettingsGeneral:\n    craft_name: str\n@dataclass\nclass SettingsPID:\n    roll_p: float = 0.0\n    roll_i: float = 0.0",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "PROJECT_ROOT",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "PROJECT_ROOT = Path(__file__).absolute().parent.parent\nRESOURCES = PROJECT_ROOT.joinpath('resources')\ndef get_image(name: str) -> tk.PhotoImage:\n    return tk.PhotoImage(file=RESOURCES.joinpath(name))\n# Settings struct\n@dataclass\nclass SettingsGeneral:\n    craft_name: str\n@dataclass\nclass SettingsPID:",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "RESOURCES",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "RESOURCES = PROJECT_ROOT.joinpath('resources')\ndef get_image(name: str) -> tk.PhotoImage:\n    return tk.PhotoImage(file=RESOURCES.joinpath(name))\n# Settings struct\n@dataclass\nclass SettingsGeneral:\n    craft_name: str\n@dataclass\nclass SettingsPID:\n    roll_p: float = 0.0",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "pid",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "pid = SettingsPID()\n# -- Styles -- #\nBASE_BACKGROUND = 'white'\nframe_style = {'bg': BASE_BACKGROUND}\nlabel_style = {'bg': BASE_BACKGROUND}\nentry_style = {'bg': BASE_BACKGROUND}\nbtn_style = {'bg': 'white', 'fg': 'black'}\nclass ParamFloat:\n    def __init__(self, parent, row: int, name: str, value: float) -> None:\n        pack = {'padx': 5, 'pady': 5, 'sticky': tk.W}",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "BASE_BACKGROUND",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "BASE_BACKGROUND = 'white'\nframe_style = {'bg': BASE_BACKGROUND}\nlabel_style = {'bg': BASE_BACKGROUND}\nentry_style = {'bg': BASE_BACKGROUND}\nbtn_style = {'bg': 'white', 'fg': 'black'}\nclass ParamFloat:\n    def __init__(self, parent, row: int, name: str, value: float) -> None:\n        pack = {'padx': 5, 'pady': 5, 'sticky': tk.W}\n        tk.Label(parent, text=name, **label_style).grid(row=row, column=0, **pack)\n        self._entry = tk.Entry(parent, **entry_style)",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "frame_style",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "frame_style = {'bg': BASE_BACKGROUND}\nlabel_style = {'bg': BASE_BACKGROUND}\nentry_style = {'bg': BASE_BACKGROUND}\nbtn_style = {'bg': 'white', 'fg': 'black'}\nclass ParamFloat:\n    def __init__(self, parent, row: int, name: str, value: float) -> None:\n        pack = {'padx': 5, 'pady': 5, 'sticky': tk.W}\n        tk.Label(parent, text=name, **label_style).grid(row=row, column=0, **pack)\n        self._entry = tk.Entry(parent, **entry_style)\n        self._entry.grid(row=row, column=1, **pack)",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "label_style",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "label_style = {'bg': BASE_BACKGROUND}\nentry_style = {'bg': BASE_BACKGROUND}\nbtn_style = {'bg': 'white', 'fg': 'black'}\nclass ParamFloat:\n    def __init__(self, parent, row: int, name: str, value: float) -> None:\n        pack = {'padx': 5, 'pady': 5, 'sticky': tk.W}\n        tk.Label(parent, text=name, **label_style).grid(row=row, column=0, **pack)\n        self._entry = tk.Entry(parent, **entry_style)\n        self._entry.grid(row=row, column=1, **pack)\n        self.set(value)",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "entry_style",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "entry_style = {'bg': BASE_BACKGROUND}\nbtn_style = {'bg': 'white', 'fg': 'black'}\nclass ParamFloat:\n    def __init__(self, parent, row: int, name: str, value: float) -> None:\n        pack = {'padx': 5, 'pady': 5, 'sticky': tk.W}\n        tk.Label(parent, text=name, **label_style).grid(row=row, column=0, **pack)\n        self._entry = tk.Entry(parent, **entry_style)\n        self._entry.grid(row=row, column=1, **pack)\n        self.set(value)\n    def get(self) -> float:",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "btn_style",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "btn_style = {'bg': 'white', 'fg': 'black'}\nclass ParamFloat:\n    def __init__(self, parent, row: int, name: str, value: float) -> None:\n        pack = {'padx': 5, 'pady': 5, 'sticky': tk.W}\n        tk.Label(parent, text=name, **label_style).grid(row=row, column=0, **pack)\n        self._entry = tk.Entry(parent, **entry_style)\n        self._entry.grid(row=row, column=1, **pack)\n        self.set(value)\n    def get(self) -> float:\n        return float(self._entry.get())",
        "detail": "src.gui",
        "documentation": {}
    }
]